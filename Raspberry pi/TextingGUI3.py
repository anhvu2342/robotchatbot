# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TextingGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#email
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from PyQt5 import QtCore, QtGui, QtWidgets
import time
import requests
import socketio
import speech_recognition as sr
from gtts import gTTS
import os
from chatprocess import ChatProcess

key = 0

class SendMessageThread(QtCore.QThread):
    finished = QtCore.pyqtSignal(str)
    sendtext = QtCore.pyqtSignal(str)
    recognizer = sr.Recognizer()
    m = sr.Microphone()
    def run(self):
        global key
        while (True):
            if key == 1:
                with self.m as source:
                    self.finished.emit("Vui lòng chờ...")
                    self.recognizer.adjust_for_ambient_noise(source, duration=0.5)
                    self.finished.emit("Xin mời nói:")
                    recorded_audio = self.recognizer.listen(source, timeout=4)
                    self.finished.emit("Đã ghi âm")

                try:
                    text = self.recognizer.recognize_google(recorded_audio, language="vi")
                    self.finished.emit("Tôi: {}\n".format(text))
                    self.sendtext.emit(text)
                except Exception as ex:
                    self.finished.emit(str(ex))
                key = 0
class TextingConnectionThread(QtCore.QThread):
    # Khởi tạo client
    sioClient = socketio.Client()
    # Địa chỉ IP và cổng của máy chủ Socket.IO
    server_address = 'http://103.162.21.15:3000/'
    receiveMessageSGN = QtCore.pyqtSignal(dict)

    def run(self):
        try:
            # Khởi tạo các sự kiện
            self.setup_handlers()
            # Kết nối tới máy chủ Socket.IO
            self.sioClient.connect(self.server_address)
            # Gửi sự kiện 'start_connect' để khởi tạo kết nối
            code = '123456'
            self.send_start_connect(code)
            # Gửi tin nhắn từ Raspberry Pi tới người nhận
            """time.sleep(1)
            message = "Hello from Raspberry Pi!"
            recipient = "123456_web"  # Thay bằng nickname của người nhận
            self.send_message(message, recipient)"""

            # Giữ kết nối mở và chờ sự kiện
            self.sioClient.wait()
        except KeyboardInterrupt:
            print("Program terminated by user.")

    def send_start_connect(self, code):
        def response(data):
            if data:
                print('status Ok')
            else:
                print('status Fail')

        self.sioClient.emit('start_connect', {'code': code, 'token': None}, callback=response)

    # Hàm gửi tin nhắn từ Raspberry Pi đến máy chủ Web
    def send_message(self, msg, sendto):
        def response(data):
            if data:
                print("ok")
            else:
                print("not ok")
        try:
            # Gửi sự kiện 'send message' với dữ liệu là message và sendto
            #self.sioClient.emit('send message', data)
            self.sioClient.emit('send message', {'user_id': sendto, 'device_id': None, 'code': '123456', 'content': msg}, callback=response)
        except Exception as e:
            print(f"Error sending message: {e}")
       
        
    def setup_handlers(self):
        # Đăng ký các sự kiện với self.sioClient
        self.sioClient.on('connect', self.on_connect)
        self.sioClient.on('disconnect', self.on_disconnect)
        self.sioClient.on('new message', self.on_new_message)
    def on_connect(self):
        print('Connected to server.')

    def on_disconnect(self):
        print('Disconnected from server.')

    def on_new_message(self, data):
        self.receiveMessageSGN.emit(data)
        savemessagetask = ChatProcess()
        current_username, current_name, email = savemessagetask.findcontact(data['message'].get('user_id'),1)
        savemessagetask.storehistorychat(current_username, current_name, data['message'].get('content'))
class SendemailThread(QtCore.QThread):
    def __init__(self, to_email, message):
        super(SendemailThread, self).__init__()
        self.to_email = to_email
        self.message = message
    def run(self):
        self.sendemail("Tin nhắn mới từ con", self.message, self.to_email)
    def sendemail(self,subject, body,to_email):
        from_email = 'thangbot02@gmail.com'
        app_password = 'mwmp xybw ypmd uoiy'  # Sử dụng mật khẩu ứng dụng ở đây
        # Cấu hình thông tin email
        msg = MIMEMultipart()
        msg['From'] = from_email
        msg['To'] = to_email
        msg['Subject'] = subject

        # Thêm nội dung email
        msg.attach(MIMEText(body, 'plain'))

        # Kết nối tới máy chủ SMTP của Gmail
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(from_email, app_password)

        # Gửi email
        text = msg.as_string()
        server.sendmail(from_email, to_email, text)
        server.quit()

        print('Email sent successfully!')

class TextToSpeechThread(QtCore.QThread):
    def __init__(self, message):
        super(TextToSpeechThread, self).__init__()
        self.message = message
    def run(self):
        self.texttospeech()
    def texttospeech(self):
        filename = os.path.dirname(__file__) + 'newmessage.mp3'
        if os.path.exists(filename):
            try:
                os.remove(filename)
            except PermissionError:
                print(f"Lỗi: Không thể xóa tệp {filename} vì nó đang được sử dụng.")
                return
        tts = gTTS(text=self.message, lang='vi')
        tts.save(filename)
        os.system("mplayer " + filename)
        #playsound.playsound(filename)

class TextingGUI(object):
    current_username = ''
    current_name = ''
    current_email = ''
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(720, 480)
        MainWindow.setMinimumSize(QtCore.QSize(720, 480))
        MainWindow.setMaximumSize(QtCore.QSize(720, 480))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.TXT_Conversation = QtWidgets.QTextEdit(self.centralwidget)
        self.TXT_Conversation.setGeometry(QtCore.QRect(70, 50, 321, 261))
        self.TXT_Conversation.setObjectName("TXT_Conversation")
        self.BTN_Record = QtWidgets.QPushButton(self.centralwidget)
        self.BTN_Record.setGeometry(QtCore.QRect(70, 327, 111, 51))
        self.BTN_Record.setObjectName("BTN_Record")
        self.BTN_SendMessage = QtWidgets.QPushButton(self.centralwidget)
        self.BTN_SendMessage.setGeometry(QtCore.QRect(282, 330, 111, 51))
        self.BTN_SendMessage.setObjectName("BTN_SendMessage")
        self.LB_Conversation = QtWidgets.QLabel(self.centralwidget)
        self.LB_Conversation.setGeometry(QtCore.QRect(74, 30, 291, 20))
        self.LB_Conversation.setObjectName("LB_Conversation")
        self.TXT_Email = QtWidgets.QTextEdit(self.centralwidget)
        self.TXT_Email.setGeometry(QtCore.QRect(430, 70, 251, 31))
        self.TXT_Email.setObjectName("TXT_Email")
        self.LB_Email = QtWidgets.QLabel(self.centralwidget)
        self.LB_Email.setGeometry(QtCore.QRect(430, 50, 101, 16))
        self.LB_Email.setObjectName("LB_Email")
        self.LB_Receiver = QtWidgets.QLabel(self.centralwidget)
        self.LB_Receiver.setGeometry(QtCore.QRect(430, 110, 55, 16))
        self.LB_Receiver.setObjectName("LB_Receiver")
        self.LW_ListReceiver = QtWidgets.QListWidget(self.centralwidget)
        self.LW_ListReceiver.setGeometry(QtCore.QRect(430, 130, 256, 121))
        self.LW_ListReceiver.setObjectName("LW_ListReceiver")
        self.BTN_EditEmail = QtWidgets.QPushButton(self.centralwidget)
        self.BTN_EditEmail.setGeometry(QtCore.QRect(430, 260, 93, 51))
        self.BTN_EditEmail.setObjectName("BTN_EditEmail")
        self.BTN_SaveEmail = QtWidgets.QPushButton(self.centralwidget)
        self.BTN_SaveEmail.setGeometry(QtCore.QRect(590, 260, 93, 51))
        self.BTN_SaveEmail.setObjectName("BTN_SaveEmail")
        self.BTN_Exit = QtWidgets.QPushButton(self.centralwidget)
        self.BTN_Exit.setGeometry(QtCore.QRect(610, 10, 93, 28))
        self.BTN_Exit.setObjectName("BTN_Exit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 720, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.BTN_Exit.clicked.connect(MainWindow.hide)
        self.BTN_Record.clicked.connect(self.startrecord)
        self.LW_ListReceiver.itemClicked.connect(self.show_email)
        self.BTN_EditEmail.clicked.connect(self.update_email)
        self.BTN_SaveEmail.clicked.connect(MainWindow.hide)

        self.load_contacts("/home/thang/document/contact.txt")
        self.connectionInit()
        self.recordInit()

        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.BTN_Record.setText(_translate("MainWindow", "Ghi lại"))
        self.BTN_SendMessage.setText(_translate("MainWindow", "Gửi"))
        self.LB_Conversation.setText(_translate("MainWindow", "Trò chuyện:"))
        self.LB_Email.setText(_translate("MainWindow", "Email thông báo:"))
        self.LB_Receiver.setText(_translate("MainWindow", "Tên:"))
        self.BTN_EditEmail.setText(_translate("MainWindow", "Cập nhật"))
        self.BTN_SaveEmail.setText(_translate("MainWindow", "Lưu"))
        self.BTN_Exit.setText(_translate("MainWindow", "Thoát"))
    def load_contacts(self,file_path):
        self.LW_ListReceiver.clear()
        with open(file_path, "r",encoding="utf-8") as file:
            for line in file:
                # Tách tên và email từ dòng
                username, name, email = line.strip().split(",")
                # Thêm tên vào QListWidget
                self.LW_ListReceiver.addItem(name)
                # Lưu email tương ứng vào dữ liệu của mỗi item
                item = self.LW_ListReceiver.item(self.LW_ListReceiver.count() - 1)
                item.setData(100, email)
                item.setData(101,username)
                self.LW_ListReceiver.setCurrentRow(0)
                txt = self.LW_ListReceiver.item(0)
                self.TXT_Email.setText(txt.data(100))
                self.current_username = txt.data(101)
                self.current_name = txt.data(0)
                self.current_email = txt.data(100)
    def show_email(self, item):
        # Lấy email từ dữ liệu của item
        email = item.data(100)
        # Hiển thị email trong QLineEdit
        self.TXT_Email.setText(email)
        # Lưu các biến current
        self.current_username = item.data(101)
        self.current_name = item.data(0)
        self.current_email = item.data(100)
        # Hiển thị lịch sử chat
        history = ChatProcess()
        self.TXT_Conversation.clear()
        self.TXT_Conversation.append(history.showhistory("/home/thang/document/chathistory.json",self.current_username))
        self.TXT_Conversation.moveCursor(13,0)
        
    def update_email(self):
        try:
            url = 'http://103.162.21.15:3000/api/device/123456/users'
            # Gửi yêu cầu GET tới API
            response = requests.get(url)
            # Kiểm tra mã trạng thái của phản hồi
            if response.status_code == 200:
                # Chuyển phản hồi thành JSON
                data = response.json()
                with open('/home/thang/document/contact.txt', 'w', encoding='utf-8') as file:
                    # Duyệt qua từng phần tử trong danh sách
                    for user in data['conects']:
                        # Trích xuất thông tin cần thiết
                        user_id = user['user_id']
                        user_name = user['user_name']
                        email = user['email']
                        # Ghi thông tin vào file
                        file.write(f"{user_id},{user_name},{email}\n")
                self.load_contacts("/home/thang/document/contact.txt")
            else:
                print(f"Failed to fetch data. Status code: {response.status_code}")
        except requests.RequestException as e:
            print(f"An error occurred: {e}")

    
    def connectionInit(self):
        self.textingServerThread = TextingConnectionThread()
        self.textingServerThread.receiveMessageSGN.connect(self.MessageReceiveProcess)
        self.textingServerThread.start()

    def MessageReceiveProcess(self, data):                                  # Xử lý tin nhắn khi nhận từ server
        self.return_name(data)
        self.updatetext(f"{self.return_name(data)}: {data['message'].get('content')}" + "\n")       # Update tin nhắn vào text box
        self.TTSThread = TextToSpeechThread(data['message'].get('content'))                    # playsound
        self.TTSThread.start()

    def return_name(self,data):
        for index in range(self.LW_ListReceiver.count()):
            item = self.LW_ListReceiver.item(index)
            if(item.data(101)==data['message'].get('user_id')):
                txt = item.text()
                return txt
    def recordInit(self):                                       # Khởi tạo hàm record
        self.recordThread = SendMessageThread()
        self.recordThread.finished.connect(self.updatetext)
        self.recordThread.sendtext.connect(self.sendmessage)
        self.recordThread.start()
    def startrecord(self):
        global key
        key = 1

    def remove_last_line(self):
        text = self.TXT_Conversation.toPlainText()
        lines = text.split('\n')
        if lines:
            lines.pop()  # Xóa dòng cuối cùng
            self.TXT_Conversation.setPlainText('\n'.join(lines))
    def updatetext(self, text):
        self.remove_last_line()
        self.TXT_Conversation.append(text)
        self.TXT_Conversation.moveCursor(11,0)

    def sendmessage(self,message):
        print("sendmessage")
        recipient = self.current_username                           # Thay bằng nickname của người nhận
        self.textingServerThread.send_message(message, recipient)
        if(self.TXT_Email.toPlainText):
            to_email = self.TXT_Email.toPlainText()
        else:
            to_email = "anhvu2342@gmail.com"
        print(to_email)
        self.mailtask = SendemailThread(to_email,message)
        self.mailtask.start()
        savemessagetask = ChatProcess()
        savemessagetask.storehistorychat(self.current_username,"Tôi",message)
        
if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = TextingGUI()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
